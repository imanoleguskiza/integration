<?php

/**
 * @file
 * Module file.
 */

include_once 'includes/integration_producer.entity.inc';
include_once 'includes/integration_producer.hooks.inc';

use Drupal\integration\Document\DocumentInterface;
use Drupal\integration_producer\EntityWrapper\EntityWrapper;
use Drupal\integration_producer\Configuration\ProducerConfiguration;

/**
 * Implements hook_permission().
 */
function integration_producer_permission() {
  return array(
    'administer producers' => array(
      'title' => t('Administer integration layer producers'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function integration_producer_menu() {

  $items['admin/config/services/integration/producer/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('integration_producer_site_settings'),
    'access arguments' => array('administer producers'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Form builder: Site-wide backend settings.
 *
 * @see integration_producer_menu()
 */
function integration_producer_site_settings() {
  $form['site_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Site settings'),
  );
  $form['site_settings']['integration_producer_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Producer ID'),
    '#default_value' => variable_get('integration_producer_id', ''),
    '#description' => t("Global producer ID for this site, set on all produced documents."),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Load producer entity given its machine name.
 *
 * @param string $machine_name
 *    Producer configuration entity machine name.
 *
 * @return ProducerConfiguration
 *    Producer configuration entity.
 */
function integration_producer_load_producer($machine_name) {
  return entity_load_single('integration_producer', $machine_name);
}

/**
 * Determines whether the given user can perform actions on an entity.
 *
 * @param string $op
 *   Operation being performed: 'view', 'update', 'create' or 'delete'.
 * @param ProducerConfiguration|NULL $producer
 *   Optionally an entity to check access for.
 * @param object|NULL $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @param string|NULL $entity_type
 *   The entity type of the entity to check for.
 *
 * @return bool
 *   Whether access is allowed or not.
 *
 * @see entity_type_supports()
 * @see integration_producer_entity_info()
 */
function integration_producer_access($op, $producer, $account, $entity_type) {
  return user_access('administer producers');
}

/**
 * Collect and return list of producer definitions.
 *
 * @return array
 *    List of producer definitions.
 */
function integration_producer_get_producer_info() {
  $producers = module_invoke_all('integration_producer_info');
  drupal_alter('integration_producer_info', $producers);
  return $producers;
}

/**
 * Collect and return list of producer field handler definitions.
 *
 * @return array
 *    List of producer field handler definitions.
 */
function integration_producer_get_field_handler_info() {
  $field_handlers = module_invoke_all('integration_producer_field_handler_info');
  drupal_alter('integration_producer_field_handler_info', $field_handlers);
  return $field_handlers;
}
